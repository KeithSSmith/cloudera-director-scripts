#
# Copyright (c) 2015 Cloudera, Inc. All rights reserved.
#

#
# Sample AWS Cloudera Director configuration file based on the Cloudera AWS reference architecture:
# http://www.cloudera.com/content/cloudera/en/resources/library/whitepaper/cloudera-enterprise-reference-architecture-for-aws-deployments.html
#
# This is a template of a non-HA deployment for all services. Kerberos configurations properties
# are also provided. Refer to Cloudera Director's documentation for more information.
#

#
# Cluster name
#

name: ${CLUSTER_NAME}

#
# The environment and deployment name will be generated by default based on the cluster
# name. Another cluster can be bootstrapped under the same deployment by specifying the
# existing environment and deployment name along with a new cluster name. Note that when
# terminating with a configuration file, the deployment is terminated along with ALL
# clusters under the deployment.
#

environmentName: ${ENVIRONMENT_NAME}
deploymentName: ${CLOUDERA_MANAGER_NAME}

#
# Cloud provider configuration (credentials, region or zone and optional default image)
#

provider {
    type: aws

    #
    # Get AWS credentials from the OS environment
    # See http://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html
    #
    # If specifying the access keys directly and not through variables, make sure to enclose
    # them in double quotes.
    #
    # Not needed when running on an instance launched with an IAM role.

    accessKeyId: ${AWS_KEY_ID}
    secretAccessKey: ${AWS_SECRET_KEY}

    #
    # ID of the Amazon AWS region to use
    # See: http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html
    #
    
    region: ${AWS_REGION}
    
    #
    # Region endpoint (if you are using one of the Gov. regions)
    #

    # regionEndpoint: ec2.us-gov-west-1.amazonaws.com

    #
    # ID of the VPC subnet
    # See: http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html
    #

    subnetId: ${AWS_SUBNET_ID}

    #
    # Comma separated list of security group IDs
    # See: http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html
    #
    # Default security group

    securityGroupsIds: ${AWS_SECURITY_GROUP_ID}
    
    #
    # A prefix that Cloudera Director should use when naming the instances (this is not part of the hostname)
    #

    instanceNamePrefix: ${AWS_INSTANCE_PREFIX}

    #
    # Specify a size for the root volume (in GBs). Cloudera Director will automatically expand the
    # filesystem so that you can use all the available disk space for your application
    # See: http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/storage_expand_partition.html
    #

    rootVolumeSizeGB: 100 # defaults to 50 GB if not specified

    #
    # Specify the type of the EBS volume used for the root partition. Defaults to gp2
    # See: http://aws.amazon.com/ebs/details/
    #

    rootVolumeType: gp2

    #
    # Whether to associate a public IP address with instances or not. If this is false
    # we expect instances to be able to access the internet using a NAT instance
    #
    # Currently the only way to get optimal S3 data transfer performance is to assign
    # public IP addresses to your instances and not use NAT instances (public subnet setup)
    #
    # See: http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-ip-addressing.html
    #

    associatePublicIpAddresses: false

    # Spot Bid (in USD per hour) for Spot instances
    # See: http://aws.amazon.com/ec2/spot/
    # Can be set here and shared across instance groups, and/or overridden/set per instance group
    # spotBidUSDPerHr: 0.50
}

#
# SSH credentials to use to connect to the instances
#

ssh {
    username: ${SSH_USERNAME}
    privateKey: ${SSH_PEM_PATH} # with an absolute path to .pem file
}

#
# These instance properties will be applied to all instances.
#

common-instance-properties {
  #
  # Amazon Machine Image (AMI)
  #
  # See: http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html
  #
  # Certain AMI virtualization types are incompatible with certain instance types. HVM
  # AMI types are recommended since they are compatible with most instance types.
  #
  # Compatibility matrix: https://aws.amazon.com/amazon-linux-ami/instance-type-matrix/
  #
  # Red Hat Enterprise Linux AMI IDs: http://aws.amazon.com/partners/redhat/
  #
  # We support RHEL and CentOS 6.5, 6.7, 7.1, and 7.2.
  # RHEL 7.2 is supported only for Cloudera Manager and CDH 5.7 and higher.
  #
  # To use Amazon EC2 D2 instances, you must run a minimum version of RHEL 6.7 or CentOS 6.7

  image: ${AWS_AMI_ID}

  #
  # Name of the IAM Role to use for this instance type
  # http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html
  #

  # iamProfileName: iam-profile-REPLACE-ME

  tags {
    owner: ${CLUSTER_OWNER}
  }

  #
  # EBS Volumes
  #
  # Director can create and attach additional EBS volumes to the instance. These volumes
  # will be automatically deleted when the associated instance is terminated. These
  # properties don't apply to the root volume.
  #
  # See http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumes.html
  #

  # ebsVolumeCount : 0
  # ebsVolumeType: st1 # specify either st1, sc1 or gp2 volume type
  # ebsVolumeSizeGiB: 500

  #
  # EBS Volume Encryption
  #
  # Encryption can be enabled on the additional EBS volumes. An optional CMK can
  # be specified for volume encryption. Not setting a CMK means the default CMK
  # for EBS will be used. The encryption here does not apply to the root volume.
  #
  # See http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html
  #

  # enableEbsEncryption: false
  # ebsKmsKeyId: arn:aws:kms:REPLACE-ME  # full ARN of the KMS CMK


  bootstrapScript: """#!/bin/sh

# This is an embedded bootstrap script that runs as root and can be used to customize
# the instances immediately after boot and before any other Cloudera Director action

# If the exit code is not zero Cloudera Director will automatically retry

###  Define Variables  ###
HOST_IP_ADDRESS=$(ip addr | grep eth0 -A2 | head -n3 | tail -n1 | awk -F'[/ ]+' '{print $3}')
HOSTNAME=$(hostname)
DOMAIN="REPLACE_ME"
DOMAIN_CONTROLLER="REPLACE_ME.${DOMAIN}"
DNS_IP="REPLACE_ME"
AD_JOIN_USER="REPLACE_ME"
AD_JOIN_PASS="REPLACE_ME"
DNS_JOIN_USER="REPLACE_ME"
DNS_JOIN_PASS="REPLACE_ME"
COMPUTER_OU="REPLACE_ME"            ## Example: OU=cloudera,DC=example,DC=com   This is where the Computer entity will be created inside of AD, if desired to be outside of the Computers OU.
KEYSTORE_PASS="REPLACE_ME"
TRUSTSTORE_PASS="REPLACE_ME"


KRB5_CONF=$(mktemp -t krb5_conf.XXXXXXXXXX)
NTP_CONF=$(mktemp -t ntp_conf.XXXXXXXXXX)
DIRECTOR_REPO=$(mktemp -t director_repo.XXXXXXXXXX)
SSSD_CONF=$(mktemp -t sssd_conf.XXXXXXXXXX)
SSHD_CONF=$(mktemp -t sshd_conf.XXXXXXXXXX)

###  Ensure the Node and YUM are up to date.  ###
yum clean all
yum makecache fast
yum -y update
yum -y install bind-utils wget telnet redhat-lsb-core nscd rng-tools ntp

###  Set SELinux to permissive  ###
sed -i.bak "s/^SELINUX=.*$/SELINUX=disabled/" /etc/selinux/config
setenforce 0

###  Disable tuned so it does not overwrite sysctl.conf  ###
service tuned stop
systemctl disable tuned

###  Disable chrony so it does not conflict with ntpd installed by Director  ###
systemctl stop chronyd
systemctl disable chronyd

###  Update config to disable IPv6 and disable  ###
echo "# Disable IPv6" >> /etc/sysctl.conf
echo "net.ipv6.conf.all.disable_ipv6 = 1" >> /etc/sysctl.conf
echo "net.ipv6.conf.default.disable_ipv6 = 1" >> /etc/sysctl.conf

# swappniess is set by Director in /etc/sysctl.conf
# Poke sysctl to have it pickup the config change.
sysctl -p

### Enable and start rngd  ###
echo 'EXTRAOPTIONS="-r /dev/urandom"' > /etc/sysconfig/rngd
chkconfig rngd on
service rngd start

###  Turn off iptables  ###
systemctl stop firewalld
systemctl disable firewalld

###  Turn on NTP with internal NTP Server  ###
sed -e 's/server 0.rhel.pool.ntp.org iburst/#server 0.rhel.pool.ntp.org iburst/' \
 -e 's/server 1.rhel.pool.ntp.org iburst/#server 1.rhel.pool.ntp.org iburst/' \
 -e 's/server 2.rhel.pool.ntp.org iburst/#server 2.rhel.pool.ntp.org iburst/' \
 -e "s/server 3.rhel.pool.ntp.org iburst/#server 3.rhel.pool.ntp.org iburst\n# NTP Server defined manually.\nserver ${DOMAIN_CONTROLLER} prefer/" \
 /etc/ntp.conf > ${NTP_CONF}

cat ${NTP_CONF} > /etc/ntp.conf
systemctl restart ntpd
ntpdate -u ${DOMAIN_CONTROLLER}

###  Update Timezone  ###
rm -f /etc/localtime
ln -s /usr/share/zoneinfo/US/Central /etc/localtime

###  Download and Install the MySQL Java Connector  ###
wget "http://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.40.tar.gz" -O /tmp/mysql-connector-java-5.1.40.tar.gz
tar zxvf /tmp/mysql-connector-java-5.1.40.tar.gz -C /tmp/
mkdir -p /usr/share/java/
cp /tmp/mysql-connector-java-5.1.40/mysql-connector-java-5.1.40-bin.jar /usr/share/java/
rm /usr/share/java/mysql-connector-java.jar
ln -s /usr/share/java/mysql-connector-java-5.1.40-bin.jar /usr/share/java/mysql-connector-java.jar

###  Install Packages needed for SSSD, DNS, LDAP, and Kerberos  ###
yum -y install realmd sssd sssd-ad samba-common adcli sssd-libwbclient openldap-devel openldap-clients pam_krb5 samba-common-tools krb5-workstation krb5-libs

###  Change /etc/krb5.conf ###
echo "[logging]
 default = FILE:/var/log/krb5libs.log
 kdc = FILE:/var/log/krb5kdc.log
 admin_server = FILE:/var/log/kadmind.log

[libdefaults]
 dns_lookup_realm = false
 dns_lookup_kdc = false
 ticket_lifetime = 24h
 renew_lifetime = 7d
 forwardable = true
 default_realm = ${DOMAIN^^}
 default_ccache_name = FILE:/tmp/krb5cc_%{uid}
 udp_preference_limit = 1

[realms]
 ${DOMAIN^^} = {
  kdc = ${DOMAIN_CONTROLLER}
  admin_server = ${DOMAIN_CONTROLLER}
 }

[domain_realm]
 .${DOMAIN} = ${DOMAIN^^}
 ${DOMAIN} = ${DOMAIN^^}
" > "${KRB5_CONF}"

cat "${KRB5_CONF}" > /etc/krb5.conf

###  Join the computer to the domain.  ###
realm discover ${DOMAIN^^}
realm join ${DOMAIN^^} -U "${AD_JOIN_USER}" --verbose --computer-ou="${COMPUTER_OU}" <<EOF
${AD_JOIN_PASS}
EOF                     ### This should be changed to a keytab; REPLACE_ME

###  Configure SSSD and SSH configuration.  ###
sed -e 's/use_fully_qualified_names = True/use_fully_qualified_names = False/' \
 -e 's|fallback_homedir = /home/%u@%d|fallback_homedir = /home/%u|' \
 -e 's|services = nss, pam|services = nss, pam\n\n[nss]\noverride_homedir = /home/%u\ndefault_shell = /bin/bash|' \
 /etc/sssd/sssd.conf > ${SSSD_CONF}

cat ${SSSD_CONF} > /etc/sssd/sssd.conf
rm -f /var/lib/sss/db/*
rm -f /var/lib/sss/mc/*
systemctl restart sssd

sed -e 's/PasswordAuthentication no/PasswordAuthentication yes/' \
 -e 's/ChallengeResponseAuthentication no/ChallengeResponseAuthentication yes/' \
 /etc/ssh/sshd_config > ${SSHD_CONF}

cat ${SSHD_CONF} > /etc/ssh/sshd_config
systemctl restart sshd

###  Enable and start nscd  ###
chkconfig nscd on
service nscd start

###  Install Java 8  ###
wget "http://archive.cloudera.com/director/redhat/7/x86_64/director/cloudera-director.repo" -O /etc/yum.repos.d/cloudera-director.repo
rpm --import "http://archive.cloudera.com/director/redhat/7/x86_64/director/RPM-GPG-KEY-cloudera"

yum clean all
yum makecache fast
yum -y install java --nogpgcheck

###  Install Java Unlimited Strength Encryption Policy Files for Java 8  ###
wget -O /tmp/jce_policy-8.zip --no-cookies --no-check-certificate --header "Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie" "http://download.oracle.com/otn-pub/java/jce/8/jce_policy-8.zip"
unzip /tmp/jce_policy-8.zip -d /tmp
rm -f /usr/java/jdk1.8.0_60/jre/lib/security/local_policy.jar
rm -f /usr/java/jdk1.8.0_60/jre/lib/security/US_export_policy.jar
mv /tmp/UnlimitedJCEPolicyJDK8/local_policy.jar /usr/java/jdk1.8.0_60/jre/lib/security/local_policy.jar
mv /tmp/UnlimitedJCEPolicyJDK8/US_export_policy.jar /usr/java/jdk1.8.0_60/jre/lib/security/US_export_policy.jar

###  Get LDAPS certificate and import into Truststore  ###
mkdir -p /opt/cloudera/security/jks
mkdir -p /opt/cloudera/security/x509
mkdir -p /opt/cloudera/security/CAcerts
echo -n | openssl s_client -connect ${DOMAIN_CONTROLLER}:636 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > /opt/cloudera/security/x509/ldaps_cert.pem
keytool -import -alias ldaps -keystore /opt/cloudera/security/jks/truststore.jks -file /opt/cloudera/security/x509/ldaps_cert.pem -storepass ${TRUSTSTORE_PASS} -noprompt
ln -s /opt/cloudera/security/jks/truststore.jks /usr/java/jdk1.8.0_60/jre/lib/security/jssecacerts

###  Create CSR's for each node  ###
keytool -genkeypair -keystore /opt/cloudera/security/jks/$(hostname -f).keystore -alias $(hostname -f) -dname "CN=$(hostname -f),OU=Director,O=Cloudera,L=Palo Alto,ST=California,C=US" -ext san=dns:$(hostname -f),dns:*.example.com -keyalg RSA -keysize 2048 -storepass ${KEYSTORE_PASS} -keypass ${KEYSTORE_PASS}
keytool -certreq -keystore /opt/cloudera/security/jks/$(hostname -f).keystore -alias $(hostname -f) -file /opt/cloudera/security/x509/$(hostname -f).csr -ext san=dns:$(hostname -f),dns:*.example.com -storepass ${KEYSTORE_PASS} -keypass ${KEYSTORE_PASS}
    
exit 0

"""

  #
  # Flag indicating whether to normalize the instance. Not setting normalization here implies that your
  # bootstrap script will take care of normalization. This is an advanced configuration that will require
  # assistance from Cloudera support.
  #
  # Normalization includes:
  #   downloading and installing packages
  #   minimizing swappiness
  #   increasing the maximun number of open files
  #   mounting ephemeral disks
  #   resizing the root partition.
  #
  # Defaults to true
  #

  normalizeInstance: true

}

#
# A list of instance types to use for groups of nodes or management services. Instances
# specified here inherit from the common-instance-properties properties specified above.
#

instances {

  m42x : ${common-instance-properties} {
    type: m4.2xlarge

    #
    # The inherited properties can be overridden
    #

    # image: ami-REPLACE-ME
  }

  m44x : ${common-instance-properties} {
    type: m4.4xlarge
  }

  c34x : ${common-instance-properties} {
    type: c3.4xlarge
  }

  c38x : ${common-instance-properties} {
    type: c3.8xlarge
  }

  c44x : ${common-instance-properties} {
    type: c4.4xlarge
  }

  i2x : ${common-instance-properties} {
    type: i2.xlarge
  }

  i22x : ${common-instance-properties} {
    type: i2.2xlarge
  }

  d2x : ${common-instance-properties} {
    type: d2.xlarge
  }

  d22x : ${common-instance-properties} {
    type: d2.2xlarge
  }

  d24x : ${common-instance-properties} {
    type: d2.4xlarge
  }

  t2l : ${common-instance-properties} {   # only suitable as a gateway
    type: t2.large
  }
}

#
# Optional external database server configuration.
#
# Cloudera Director can provision RDS database servers on-demand or create databases
# on existing database servers. This reference configuration does the former.
#

databaseServers {

#
# Provision RDS database server
#

    rds-mysql-director {
      type: ${DB_TYPE}                                                  # Example: mysql
      user: ${DB_USER}                                                  # Example: root
      password: ${DB_PASS}
      instanceClass: ${RDS_INSTANCE_SIZE}                               # Example: db.m3.medium
      dbSubnetGroupName: ${DB_SUBNET_GROUP_NAME}
      vpcSecurityGroupIds: ${DB_SECURITY_GROUP_ID}
      allocatedStorage: ${RDS_STORAGE_SIZE}                             # Example: 100
      engineVersion: ${RDS_MYSQL_VERSION}                               # Example: 5.5.40b
      multiAZ: true                                                     # Example true of false
      tags {
        owner: ${CLUSTER_OWNER}
      }
    }

#    
#     Use an existing MySQL server
#    
#    
#     existingmysql1 {
#        type: ${DB_TYPE}
#        host: ${DB_IP}                                                 #   host: REPLACE_ME # with IP address of database server
#        port: 3306
#        user: ${DB_USER}
#        password: ${DB_PASS}
#     }
#
#
#     Use an existing PostgresSQL server
#
#
#     existingpostgres1 {
#       type: postgresql
#       host: REPLACE-ME # with IP address of database server
#       port: 5432
#       user: postgres
#       password: rootpassword
#     }
#

}

#
# Configuration for Cloudera Manager. Cloudera Director can use an existing Cloudera Manager
# or bootstrap everything from scratch for a new cluster
#

cloudera-manager {

    instance: ${instances.m42x} {
        tags {
            # add any additional tags as needed
            application: "Cloudera Manager 5"
            Name: "Cloudera Manager"
        }
    }

    #
    # Licensing configuration
    #
    # There are three mutually exclusive options for setting up Cloudera Manager's license.
    # 1. License text may be embedded in this file using the "license" field. Triple quotes (""")
    #    are recommended for including multi-line text strings.
    # 2. The "licensePath" can be used to specify the path to a file containing the license.
    # 3. The "enableEnterpriseTrial" flag indicates whether the 60-Day Cloudera Enterprise Trial
    #    should be activated when no license is present. This must not be set to true if a
    #    license is included using either "license" or "licensePath".

    #
    # Embed a license for Cloudera Manager
    #

    # license: """
    #   -----BEGIN PGP SIGNED MESSAGE-----
    #   Hash: SHA1
    #
    # {
    #   "version"        : 1,
    #   "name"           : "License Owner",
    #   "uuid"           : "license id",
    #   "expirationDate" : 0,
    #   "features"       : [ "FEATURE1", "FEATURE2" ]
    # }
    # -----BEGIN PGP SIGNATURE-----
    # Version: GnuPG v1.4.11 (GNU/Linux)
    #
    # PGP SIGNATURE
    # -----END PGP SIGNATURE-----
    # """

    #
    # Include a license for Cloudera Manager from an external file
    #

    # licensePath: "/path/to/license.txt.asc"
    licensePath: ${CLOUDERA_LICENSE_PATH}               # REPLACE_ME if the license file is not in this location or if you don't have a license see comments above about license options.

    #
    # Specify the billing ID.
    #
    # Cloudera Director will use the billing ID to report usage information to a metering service
    # for usage based billing.
    #
    # Usage reporting starts as soon as you assign a billing ID and a license to a Cloudera Manager.
    # If you remove a billing ID, Director will stop reporting to the metering service.
    #
    # When usage reporting stops, you will not have access to Cloudera Support with this deployment.
    # If you want a billing ID, please contact Cloudera.

    # billingId: 0063401341Ku4DQABZ

    #
    # Activate 60-Day Cloudera Enterprise Trial
    #

    enableEnterpriseTrial: false

    # Deployment option for Java when deploying via Cloudera Director.
    # AUTO - default, will install Java 6 and 7
    # NONE - requires custom bootstrap script to install desired Java version

    javaInstallationStrategy: NONE

    #
    # Install the unlimited strength JCE policy files for higher levels of encryption.
    # Prior to setting this to true, confirm that you understand the legal ramifications
    # of using unlimited JCE policy files in your country.
    #

    unlimitedJce: false

    #
    # Kerberos Credentials
    #

    # #
    # # An administrative Kerberos account capable of creating principals on the KDC that
    # # Cloudera Manager will be using. This will typically be in the format:
    # #    Principal@YOUR.KDC.REALM
    
    krbAdminUsername: ${KERBEROS_ADMIN_USER}
    
    # # The password for the administrative Kerberos account.
    
    krbAdminPassword: ${KERBEROS_ADMIN_PASS}
    

    #
    # Optional database configuration for Cloudera Manager
    #
    # There are three mutually exclusive options for database usage in Cloudera Director.
    # 1. With no configuration, embedded PostgreSQL databases will be used.
    # 2. Alternatively, existing external databases can be used.
    # 3. Finally, databases can be created on the fly on existing external database servers.
    #
    # Note that using an external database here necessitates using an external database
    # for the cluster services. This reference configuration is using Option 3.
    #

    #
    # 2. Optional configuration for existing external databases
    #
    # databases {
    #     CLOUDERA_MANAGER {
    #         type: postgresql
    #
    #         host: db.example.com
    #         port: 123
    #
    #         user: admin
    #         password: 1231ed
    #
    #         name: scm
    #     }
    #
    #     ACTIVITYMONITOR { ... }
    #
    #     REPORTSMANAGER { ... }
    #
    #     NAVIGATOR { ... }
    #
    #     # Available in Cloudera Manager 5.2+
    #     NAVIGATORMETASERVER { ... }
    # }

    #
    # 3. Optional configuration for creating external databases on the fly
    #
    # When a database is created on the fly, Director generates a random database name using the specified database
    # name prefix, a random username based on the specified username prefix, and a random password. The password is
    # stored by Director and made available to the service that uses the database. If multiple services reference the
    # same external database server, Director will create a database for each.
    #
    # MySQL limits usernames to sixteen characters. Therefore, limit usernamePrefix values for databases on MySQL to
    # seven characters; the remaining nine characters are used by the randomized suffix generated by Director.
    #
    # Note that the databaseServerName must correspond to an external database server named above, which
    # can be the provisioned RDS instance or another existing database server.
    #

    databaseTemplates {
        CLOUDERA_MANAGER {
            name: scmt
            databaseServerName: rds-mysql-director                      # Must correspond to an external database server named above
            databaseNamePrefix: scm
            usernamePrefix: scmu
        }

        ACTIVITYMONITOR {
            name: amont
            databaseServerName: rds-mysql-director                      # Must correspond to an external database server named above
            databaseNamePrefix: amon
            usernamePrefix: amonu
        }

        REPORTSMANAGER {
            name: rmant
            databaseServerName: rds-mysql-director                      # Must correspond to an external database server named above
            databaseNamePrefix: rman
            usernamePrefix: rmanu
        }

        NAVIGATOR {
            name: navt
            databaseServerName: rds-mysql-director                      # Must correspond to an external database server named above
            databaseNamePrefix: nav
            usernamePrefix: navu
        }

        # Available in Cloudera Manager 5.2+
        NAVIGATORMETASERVER {
            name: navmst
            databaseServerName: rds-mysql-director                      # Must correspond to an external database server named above
            databaseNamePrefix: navms
            usernamePrefix: navmsu
        }
    }

    #
    # Configuration to override Cloudera Manager package repositories
    #

    # RHEL 6 repositories are being used here since they are needed for ACCUMULO16.
    # RHEL 7 will also work if ACCUMULO16 service is not being used.
    
    repository: ${CM_REPO}
    repositoryKeyUrl: ${CM_REPO_KEY}

    # OR use an existing Cloudera Manager installation

    # hostname: "192.168.33.10"
    # username: <if not default 'admin'>
    # password: <if not default 'admin'>

    #
    # Optional configuration for Cloudera Manager and its management services
    #
    # Configuration properties for CLOUDERA_MANAGER are documented at
    # http://www.cloudera.com/documentation/enterprise/properties/5-9-x/topics/cm_props_cmserver.html
    #
    # Configuration properties for the Cloudera Management services are documented at
    # http://www.cloudera.com/documentation/enterprise/properties/5-9-x/topics/cm_props_mgmtservice.html
    #
    # Configuration properties for Hosts are documented at
    # http://www.cloudera.com/documentation/enterprise/properties/5-9-x/topics/cm_props_host.html
    #

    configs {
         # CLOUDERA_MANAGER corresponds to the Cloudera Manager Server configuration options
         CLOUDERA_MANAGER {
             enable_api_debug: true
             custom_banner_html: "Managed by Cloudera Director"

             #
             # Kerberos Configurations
             #

             
             # # The type of KDC Cloudera Manager will be using. Valid values are "MIT KDC"
             # # and "Active Directory"
             
             KDC_TYPE: ${KDC_TYPE}
             
             
             # # The KDC host name or IP address.
             
             KDC_HOST: ${KDC_HOST}
             
             
             # # The security realm that your KDC uses. This will be of the format of a fully
             # # qualified domain name:
             # #    YOUR.KDC.REALM
             
             SECURITY_REALM: ${KDC_REALM}
             
             # # The Active Directory KDC domain. Only applicable to Active Directory KDCs. This
             # # will be in the format of an X.500 Directory Specification:
             # #    DC=domain,DC=example,DC=com
             
             AD_KDC_DOMAIN: ${KDC_AD_DOMAIN}
             
             # # Allow Cloudera Manager to deploy Kerberos configurations to hosts. At the moment,
             # # Director only supports setting this to true.
             
             KRB_MANAGE_KRB5_CONF: true
             
             # # The encryption types your KDC supports. Some of those listed below will require the
             # # unlimited strength JCE policy files.
             
             KRB_ENC_TYPES: ${KRB_ENC_TYPES}
             
            # There are many more optional Kerberos configuration options available to Cloudera Manager.
            # Please refer to the Kerberos section on
            # http://www.cloudera.com/content/cloudera/en/documentation/core/latest/topics/cm_props_cmserver.html
            # for more details.

            AD_ACCOUNT_PREFIX: "cdh-"
            AD_DELETE_ON_REGENERATE: "true"
            AD_SET_ENCRYPTION_TYPES: "true"
            AD_USE_SIMPLE_AUTH: "false"
            KDC_ACCOUNT_CREATION_HOST_OVERRIDE: ${KDC_HOST}


            ###  Configuring External Authentiction for Cloudera Manager   ###
            AUTH_BACKEND_ORDER: "LDAP_ONLY"
            LDAP_URL: ${LDAP_URL}
            NT_DOMAIN: ${KDC_REALM}
            LDAP_BIND_DN: ${LDAP_ADMIN_USER}
            LDAP_BIND_PW: ${LDAP_ADMIN_PASS}
            LDAP_ADMIN_GROUPS: ${CM_ADMIN_GROUP}
            LDAP_USER_GROUPS: ${CM_USER_GROUPS}
            LDAP_NAVIGATOR_ADMIN_GROUPS: ${NAV_ADMIN_GROUPS}
            LDAP_GROUP_SEARCH_FILTER: "(member={0})"
            LDAP_USER_SEARCH_FILTER: "(uid={0})"
         }

        #
        # # CLOUDERA_MANAGEMENT_SERVICE corresponds to the Service-Wide configuration options
        # CLOUDERA_MANAGEMENT_SERVICE {
        #  enable_alerts : false
        #  enable_config_alerts : false
        # }
        #
        # SERVICEMONITOR { ... }
        #
        # ACTIVITYMONITOR { ... }
        #
        # HOSTMONITOR { ... }
        #
        # REPORTSMANAGER { ... }
        #
        # EVENTSERVER { ... }
        #
        # ALERTPUBLISHER { ... }
        #
        # NAVIGATOR { ... }
        #
        # # Available in Cloudera Manager 5.2+
        # NAVIGATORMETASERVER { ... }
        #
        # # Configuration properties for all hosts
        # HOSTS { ... }
        
        CLOUDERA_MANAGEMENT_SERVICE {
            enable_alerts: false
            enable_config_alerts: false
        }
        
        SERVICEMONITOR {
            mgmt_log_dir: /data0/log/cloudera-scm-firehose
            firehose_storage_dir: /data0/lib/cloudera-service-monitor
        }

        ACTIVITYMONITOR {
            mgmt_log_dir: /data0/log/cloudera-scm-firehose
        }

        HOSTMONITOR {
            mgmt_log_dir: /data0/log/cloudera-scm-firehose
            firehose_storage_dir: /data0/lib/cloudera-host-monitor
        }

        REPORTSMANAGER {
            headlamp_scratch_dir: /data0/lib/cloudera-scm-headlamp
            mgmt_log_dir: /data0/log/cloudera-scm-headlamp
        }

        EVENTSERVER {
            mgmt_log_dir: /data0/log/cloudera-scm-eventserver
            eventserver_index_dir: /data0/lib/cloudera-scm-eventserver
        }

        ALERTPUBLISHER {
            mgmt_log_dir: /data0/log/cloudera-scm-alertpublisher
        }

        NAVIGATOR {
            mgmt_log_dir: /data0/log/cloudera-scm-navigator
        }

        NAVIGATORMETASERVER {
            audit_event_log_dir: /data0/log/cloudera-scm-navigator/audit
            data_dir: /data0/lib/cloudera-scm-navigator
            mgmt_log_dir: /data0/log/cloudera-scm-navigator
            auth_backend_order: "EXTERNAL_THEN_CM"
            external_auth_type: "ACTIVE_DIRECTORY"
            nav_ldap_url: ${NAV_LDAP_URL}
            nav_nt_domain: ${KDC_REALM}
            nav_ldap_bind_dn: ${LDAP_ADMIN_USER}
            nav_ldap_bind_pw: ${LDAP_ADMIN_PASS}
            nav_ldap_group_search_base: ${NAV_LDAP_GROUP_SEARCH_BASE}
            nav_ldap_group_search_filter: "(memberOf={0})"
            nav_ldap_groups_search_filter: "(&(objectClass=group)(cn=*{0}*))"
            nav_ldap_user_search_base: ${NAV_LDAP_USER_SEARCH_BASE}
            nav_ldap_user_search_filter: "(sAMAccountName={0})"
        }

        # Configuration properties for all hosts
        HOSTS {
        }
    }
}

#
# Highly Available Cluster description
#

cluster {

    # List the products and their versions that need to be installed.
    # These products must have a corresponding parcel in the parcelRepositories
    # configured above. The specified version will be used to find a suitable
    # parcel. Specifying a version that points to more than one parcel among
    # those available will result in a configuration error. Specify more granular
    # versions to avoid conflicts.

    products {
      CDH: ${CDH_VERSION}
    }

    #
    # Optional override of CDH parcel repositories
    #

    parcelRepositories: ["CDH_REPO"]

    #
    # NOTE: Sentry is only supported in Cloudera Manager versions 5.1 onward.
    # NOTE: Accumulo 1.6 is not supported on RHEL 7 and onward.
    #

    services: [CLUSTER_SERVICES]

    #
    # Optional custom service configurations
    # Configuration keys containing special characters (e.g., '.', ':') must be enclosed in double quotes.
    #
    # Configuration properties for CDH roles and services are documented at
    # http://www.cloudera.com/documentation/enterprise/properties/5-9-x/topics/cm_props_cdh590.html
    #

    #
    # configs {
    #     HDFS {
    #       dfs_block_size: 134217728
    #     }
    #
    #     MAPREDUCE {
    #       mapred_system_dir: /user/home
    #       mr_user_to_impersonate: mapred1
    #     }
    #
    #     KAFKA {
    #       "num.partitions": 3
    #     }
    # }


    #
    # Optional database configuration for Cluster Services
    #
    # As mentioned in the cloudera-manager section, the three mutually exclusive options for database
    # usage are (1) No configuration which uses embedded PostgreSQL databases; (2) Use existing
    # external databases; or (3) Create databases on an existing external database server.
    #

    #
    # 2. Optional configuration for existing external databases for Hive Metastore or Sentry databases
    #

    # databases {
    #     HIVE {
    #         type: postgresql
    #         host: db.example.com
    #         port: 123
    #         user: hive
    #         password: pass
    #         name: hive_db
    #     },
    #
    #     HUE {
    #         type: postgresql
    #         host: db.example.com
    #         port: 123
    #         user: hue
    #         password: pass
    #         name: hue_db
    #     },
    #
    #     OOZIE {
    #         type: postgresql
    #         host: db.example.com
    #         port: 123
    #         user: oozie
    #         password: pass
    #         name: oozie_db
    #     },
    #
    #     # Sentry requires Kerberos
    #     SENTRY {
    #         type: postgresql
    #         host: db.example.com
    #         port: 123
    #         user: sentry
    #         password: pass
    #         name: sentry_db
    #     },
    # }

    #
    # 3. Optional configuration for creating external databases on the fly for Hive Metastore, Hue,
    # Oozie and Sentry database
    #

    configs {
        # HDFS fencing should be set to true for HA configurations
        HDFS {
            dfs_ha_fencing_methods: "shell(true)"
            dfs_replication: "3"
            dfs_block_local_path_access_user: "impala,mapred,spark"
            dfs_namenode_acls_enabled: "true"
            dfs_permissions_supergroup: ${HDFS_SUPERGROUP}
            #dfs_umaskmode: "027"                                       ### Do not set this, will only start HDFS and not allow other services to succeed during the First Run of the cluster.  Should be set after the cluster has completed deployment via Director.
            hadoop_authorized_admin_groups: ${HDFS_ADMIN_GROUPS}
            hadoop_authorized_admin_users: ""
            hadoop_authorized_groups: ${HDFS_AUTHORIZED_GROUPS}
            hadoop_authorized_users: ""
            hadoop_secure_web_ui: "true"
            hdfs_sentry_sync_enable: "true"
            redaction_policy_enabled: "true"
            redaction_policy: "{\n  \"version\": 1,\n  \"rules\": [\n    {\n      \"description\": \"Credit Card numbers (with separator)\",\n      \"search\": \"\\\\d{4}[^\\\\w]\\\\d{4}[^\\\\w]\\\\d{4}[^\\\\w]\\\\d{4}\",\n      \"caseSensitive\": true,\n      \"replace\": \"XXXX-XXXX-XXXX-XXXX\"\n    },\n    {\n      \"description\": \"Email addresses\",\n      \"search\": \"\\\\b([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\\\-\\\\._]*[A-Za-z0-9])@(([A-Za-z0-9]|[A-Za-z][A-Za-z0-9\\\\-]*[A-Za-z0-9])\\\\.)+([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\\\-]*[A-Za-z0-9])\\\\b\",\n      \"caseSensitive\": true,\n      \"replace\": \"email@redacted.host\"\n    },\n    {\n      \"description\": \"Social Security numbers (with separator)\",\n      \"search\": \"\\\\d{3}[^\\\\w]\\\\d{2}[^\\\\w]\\\\d{4}\",\n      \"caseSensitive\": true,\n      \"replace\": \"XXX-XX-XXXX\"\n    }\n  ]\n}"
        }

        YARN {
            hadoop_secure_web_ui: "true"
            yarn_admin_acl: ${YARN_ADMIN_GROUPS}
        }

        HIVE {
            audit_event_log_dir: /data0/log/hive/audit
            lineage_event_log_dir: /data0/log/hive/lineage
        }

        HUE {
            auth_backend: "desktop.auth.backend.LdapBackend"
            ldap_url: ${HUE_LDAP_URL}
            use_start_tls: ${HUE_LDAPS_FLAG}
            bind_dn: ${HUE_LDAP_ADMIN_USER}
            bind_password: ${LDAP_ADMIN_PASS}
            base_dn: ${HUE_LDAP_SEARCH_BASE}
            create_users_on_login: "false"
            nt_domain: ${KDC_REALM}
            search_bind_authentication: "true"
        }

        SENTRY {
            sentry_service_admin_group: ${SENTRY_ADMIN_GROUPS}
        }
    }

    databaseTemplates: {
        HIVE {
            name: hivet
            databaseServerName: rds-mysql-director                      # Must correspond to an external database server named above
            databaseNamePrefix: hive
            usernamePrefix: hiveu
        },

        HUE {
            name: huet
            databaseServerName: rds-mysql-director                      # Must correspond to an external database server named above
            databaseNamePrefix: hue
            usernamePrefix: hueu
        },

        OOZIE {
            name: ooziet
            databaseServerName: rds-mysql-director                      # Must correspond to an external database server named above
            databaseNamePrefix: oozie
            usernamePrefix: oozieu
        },

        # Sentry requires Kerberos
        SENTRY {
            name: sentryt
            databaseServerName: rds-mysql-director                      # Must correspond to an external database server named above
            databaseNamePrefix: sentry
            usernamePrefix: sentryu
        }
    }

    #
    # Instance group configurations
    #

    #
    # Given the number of services being deployed in this sample, in order to not overload
    # a single instance, the roles for the masters have been split between two instances
    # (masters-1 and masters-2). Alternatively, all the master roles can be placed in a single
    # instance if fewer services are being deployed or if the instance type is large enough
    # to handle all roles.
    #

    masters-1 {
        count: ${MASTER_HA_NODE_COUNT}

        instance: ${instances.i22x} {
            tags {
                group: masters-1
                Name: "Master HA Nodes"
            }
        }

        roles {
            HDFS: [NAMENODE, FAILOVERCONTROLLER, JOURNALNODE]
            ZOOKEEPER: [SERVER]
            YARN: [RESOURCEMANAGER]
            SPARK_ON_YARN: [GATEWAY]
            HBASE: [MASTER]
        }

      #
      # Optional custom role configurations
      # Configuration keys containing special characters (e.g., '.', ':') must be enclosed in double quotes.
      #
      # Configuration properties for CDH roles and services are documented at
      # http://www.cloudera.com/documentation/enterprise/properties/5-9-x/topics/cm_props_cdh590.html
      #

      # configs {
      #   HDFS {
      #      NAMENODE {
      #        dfs_name_dir_list: /data/nn
      #        namenode_port: 1234
      #      }
      #   }
      #   KAFKA {
      #      KAFKA_BROKER {
      #        broker_max_heap_size: 512
      #        "log.dirs": /data0/kafka/data
      #     }
      #   }
      # }

        # NameNode nameservice, autofailover, and quorum journal name must be configured for high availability
        configs {
            HDFS {
                NAMENODE {
                    dfs_federation_namenode_nameservice: ${HDFS_NAMESERVICE}
                    autofailover_enabled: true
                    dfs_namenode_quorum_journal_name: ${HDFS_NAMESERVICE}
                    dfs_name_dir_list: /data1/dfs/nn
                }
                JOURNALNODE {
                    dfs_journalnode_edits_dir: /data1/dfs/jn
                }
            }
            ZOOKEEPER {
                SERVER {
                    dataDir: /data0/zk/data
                    dataLogDir: /data0/zk/log
                }
            }
        }
    }

    masters-2 {
        count: ${MASTER_NODE_COUNT}

        instance: ${instances.i22x} {
            tags {
                group: masters-2
                Name: "Master Node"
            }
        }

        roles {
            HDFS: [JOURNALNODE, HTTPFS] # HTTPFS role needed for HUE
            HIVE: [HIVESERVER2, HIVEMETASTORE]
            HUE: [HUE_SERVER]
            ZOOKEEPER: [SERVER]
            YARN: [JOBHISTORY]
            SPARK_ON_YARN: [SPARK_YARN_HISTORY_SERVER, GATEWAY]
            IMPALA: [CATALOGSERVER, STATESTORE]
            OOZIE: [OOZIE_SERVER]
            HBASE: [HBASETHRIFTSERVER]
            SQOOP: [SQOOP_SERVER]
        }

        configs {
            HDFS {
                JOURNALNODE {
                    dfs_journalnode_edits_dir: /data1/dfs/jn
                }
            }
            ZOOKEEPER {
                SERVER {
                    dataDir: /data0/zk/data
                    dataLogDir: /data0/zk/log
                }
            }
        }
    }

    workers {
      count: ${WORKER_NODE_COUNT}

      #
      # Minimum number of instances required to set up the cluster.
      # Fail and quit if minCount number of instances is not available in this cloud
      # environment. Else, continue setting up the cluster.
      #

      minCount: 4

      instance: ${instances.d22x} {
      
        # Put all cluster nodes in a placement group for improved network performance
        # Note: this only works for a limited set of instances
        # http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html

        # placementGroup: REPLACE-ME
        
        tags {
          group: worker
          Name: "Woker Nodes"
        }
      }

      roles {
        HDFS: [DATANODE]
        YARN: [NODEMANAGER]
        IMPALA: [IMPALAD]
        SOLR: [SOLR_SERVER]
        HBASE: [REGIONSERVER]
      }

      #
      # Optional custom role configurations
      # Configuration keys containing special characters (e.g., '.', ':') must be enclosed in double quotes.
      #
      # Configuration properties for CDH services and roles are documented at
      # http://www.cloudera.com/documentation/enterprise/properties/5-9-x/topics/cm_props_cdh590.html
      #

      # configs {
      #   HDFS {
      #     DATANODE {
      #        dfs_data_dir_list: /data/dn
      #      }
      #   }
      #   HBASE {
      #     REGIONSERVER {
      #       hbase_regionserver_java_heapsize: 4000000000
      #     }
      #   }
      # }
      
      configs {
        HDFS {
          DATANODE {
             dfs_data_dir_list: "/data0/dfs/dn,/data1/dfs/dn,/data2/dfs/dn,/data3/dfs/dn,/data4/dfs/dn,/data5/dfs/dn"
           }
        }
        YARN {
          NODEMANAGER {
            yarn_nodemanager_local_dirs: "/data0/yarn/nm,/data1/yarn/nm,/data2/yarn/nm,/data3/yarn/nm,/data4/yarn/nm,/data5/yarn/nm"
            yarn_nodemanager_log_dirs: "/data0/yarn/container-logs,/data1/yarn/container-logs,/data2/yarn/container-logs,/data3/yarn/container-logs,/data4/yarn/container-logs,/data5/yarn/container-logs"
          }
        }
      }
    }

    # Spot instance group configuration
    # See: http://www.cloudera.com/documentation/director/latest/topics/director_aws_using_spot_instances.html
    # workers-spot {
    #   count: 3
    #   #
    #   # Minimum number of instances required to set up the cluster.
    #   # Fail and quit if minCount number of instances is not available in this cloud
    #   # environment. Else, continue setting up the cluster.
    #   #
    #   # For a group using Spot instances, minCount should always be 0.
    #   minCount: 0

    #   instance: ${instances.c44x} {

    #     # Put all cluster nodes in a placement group for improved network performance
    #     # Note: this only works for a limited set of instances
    #     # http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html

    #     # placementGroup: REPLACE-ME

    #     # sshUsername: centos # May vary by image

    #     useSpotInstances: true
    #     # spotBidUSDPerHr: 0.50 # Can be set/overridden per instance group

    #     tags {
    #       group: worker-spot
    #     }
    #   }

    #   # Only stateless roles can be used with Spot instances
    #   roles {
    #     YARN: [NODEMANAGER]
    #   }

    #   #
    #   # Optional custom role configurations
    #   # Configuration keys containing special characters (e.g., '.', ':') must be enclosed in double quotes.
    #   #
    #   # Configuration properties for CDH roles and services are documented at
    #   # http://www.cloudera.com/documentation/enterprise/properties/5-9-x/topics/cm_props_cdh590.html
    #   #
    #
    #   # configs {
    #   # }
    # }

    gateways {
      count: ${GATEWAY_NODE_COUNT}

      instance: ${instances.t2l} {
        tags {
          group: gateway
          Name: "Gateway Node"
        }
      }

      roles {
        HIVE: [GATEWAY]
        SPARK_ON_YARN: [GATEWAY]
        YARN: [GATEWAY]
        SOLR: [GATEWAY]
        FLUME: [AGENT]
      }

      #
      # Optional custom role configurations
      # Configuration keys containing special characters (e.g., '.', ':') must be enclosed in double quotes.
      #
      # Configuration properties for CDH roles and services are documented at
      # http://www.cloudera.com/documentation/enterprise/properties/5-9-x/topics/cm_props_cdh590.html
      #

      # Configuration keys containing periods must be enclosed in double quotes.
      # configs {
      #   HIVE {
      #     GATEWAY {
      #       hive_metastore_timeout: 3000
      #       client_config_root_dir: /etc/hive
      #     }
      #   }
      # }
    }
    
    postCreateScripts: ["""#!/bin/sh

# This is an embedded post creation script that runs as root and can be used to
# customize the cluster after it has been created.

# If the exit code is not zero Cloudera Director will fail

# Post creation scripts also have access to the following environment variables:

#    DEPLOYMENT_HOST_PORT
#    ENVIRONMENT_NAME
#    DEPLOYMENT_NAME
#    CLUSTER_NAME
#    CM_USERNAME
#    CM_PASSWORD

echo 'Hello World!'
exit 0
    """,
    """#!/usr/bin/python

# Additionally, multiple post-creation scripts can be supplied.  They will run
# in the order they are listed here.  Interpeters other than bash can be used
# as well.

print 'Hello again!'
    """]

    # For more complex scripts, post creation scripts can be supplied via path,
    # where they will be read from the local filesystem.  They will run after
    # any scripts supplied in the previous postCreateScripts section.
    # postCreateScriptsPaths: ["/tmp/test-script.sh",
    #                         "/tmp/test-script.py"]

    preTerminateScripts: ["""#!/bin/sh

# This is an embedded pre-termination script that runs as root and can be used to
# customize the cluster after it has been created.

# If the exit code is not zero Cloudera Director will fail

# Pre terminate scripts also have access to the following environment variables:

#    DEPLOYMENT_HOST_PORT
#    ENVIRONMENT_NAME
#    DEPLOYMENT_NAME
#    CLUSTER_NAME
#    CM_USERNAME
#    CM_PASSWORD

echo 'Goodbye World!'
exit 0
    """,
    """#!/usr/bin/python

# Additionally, multiple pre terminate scripts can be supplied.  They will run
# in the order they are listed here.  Interpeters other than bash can be used
# as well.

print 'Goodbye again!'
        """]

    # For more complex scripts, pre terminate scripts can be supplied via path,
    # where they will be read from the local filesystem.  They will run after
    # any scripts supplied in the previous preTerminateScripts section.
    # preTerminateScriptsPaths: ["/tmp/test-script.sh",
    #                            "/tmp/test-script.py"]
}
